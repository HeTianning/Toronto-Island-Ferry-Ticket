#### Workspace setup ####
library(tidyverse)
#### Simulate data ####
# Set seed
set.seed(100)
# Function to create random timestamps
generate_timestamps <- function(n, start_time = "2024-09-24 00:00:00", interval_minutes = 15) {
start_time <- as.POSIXct(start_time)
return(start_time + seq(0, by = interval_minutes * 60, length.out = n))
}
# Number of rows to simulate
n <- 1000
# Simulate data
simulated_data <- tibble(
`_id` = 1:n,
`Timestamp` = generate_timestamps(n, start_time = "2024-09-24 00:00:00", interval_minutes = 15),
`Redemption Count` = sample(0:20, n, replace = TRUE),  # random integer values from 0 to 20
`Sales Count` = sample(0:50, n, replace = TRUE)       # random integer values from 0 to 50
)
# show simulated data
simulated_data
#### Workspace setup ####
library(opendatatoronto)
library(tidyverse)
# get package
package <- show_package("toronto-island-ferry-ticket-counts")
package
#### Preamble ####
# Purpose: Downloads and saves the data from Open data Toronto
# Author: He Tianning
# Date: 24 September 2024
# Contact: tianning.he@mail.utoronto.ca
# License: MIT
# Pre-requisites: None
#### Workspace setup ####
library(opendatatoronto)
library(tidyverse)
#### Download data ####
# get package
package <- show_package("toronto-island-ferry-ticket-counts")
package
# get all resources for this package
resources <- list_package_resources("toronto-island-ferry-ticket-counts")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
data
#### Save data ####
# change the_raw_data to whatever name you assigned when you downloaded it.
write_csv(data, "data/raw_data/raw-ferry-ticket-counts.csv")
library(tidyverse)
#### Clean data ####
data <- read_csv("data/raw_data/raw-ferry-ticket-counts.csv")
cleaned_data <-
data |>
select(-`_id`)|> # remove id variable
tidyr::drop_na() # remove rows with missing value
#### Save data ####
write_csv(cleaned_data, "data/analysis_data/clean-ferry-ticket-counts.csv")
library(tidyverse)
#### Clean data ####
data <- read_csv("data/raw_data/raw-ferry-ticket-counts.csv")
cleaned_data <-
data |>
select(-`_id`)|> # remove id variable
tidyr::drop_na() # remove rows with missing value
#### Save data ####
write_csv(cleaned_data, "data/analysis_data/clean-ferry-ticket-counts.csv")
library(tidyverse)
#### Test data ####
simulated_data = read_csv("data/raw_data/raw-ferry-ticket-counts.csv")
# Test 1: Check if number of rows is 1000
if (nrow(simulated_data) == 1000) {
cat("Test 1 Passed: Correct number of rows\n")
} else {
cat("Test 1 Failed: Incorrect number of rows\n")
}
# Test 2: Check if 'Redemption Count' and 'Sales Count' are non-negative
if (all(simulated_data$`Redemption Count` >= 0) &&
all(simulated_data$`Sales Count` >= 0)) {
cat("Test 2 Passed: 'Redemption Count' and 'Sales Count' are within the expected range\n")
} else {
cat("Test 2 Failed: 'Redemption Count' or 'Sales Count' is out of range\n")
}
# Test 3: Check if 'Timestamp' column is in correct POSIXct time format
# Attempt to convert the 'Timestamp' column to POSIXct and check for any conversion failures
timestamps <- as.POSIXct(simulated_data$Timestamp, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
if (all(!is.na(timestamps))) {
cat("Test 3 Passed: All 'Timestamp' values are valid POSIXct time variables\n")
} else {
cat("Test 3 Failed: Some 'Timestamp' values are not valid POSIXct time variables\n")
}
library(tidyverse)
#### Simulate data ####
# Set seed
set.seed(100)
# Function to create random timestamps
generate_timestamps <- function(n, start_time = "2024-09-24 00:00:00", interval_minutes = 15) {
start_time <- as.POSIXct(start_time)
return(start_time + seq(0, by = interval_minutes * 60, length.out = n))
}
# Number of rows to simulate
n <- 1000
# Simulate data
simulated_data <- tibble(
`_id` = 1:n,
`Timestamp` = generate_timestamps(n, start_time = "2024-09-24 00:00:00", interval_minutes = 15),
`Redemption Count` = sample(0:20, n, replace = TRUE),  # random integer values from 0 to 20
`Sales Count` = sample(0:50, n, replace = TRUE)       # random integer values from 0 to 50
)
# show simulated data
simulated_data
library(tidyverse)
#### Test data ####
simulated_data = read_csv("data/raw_data/raw-ferry-ticket-counts.csv")
# Test 1: Check if number of rows is 1000
if (nrow(simulated_data) == 1000) {
cat("Test 1 Passed: Correct number of rows\n")
} else {
cat("Test 1 Failed: Incorrect number of rows\n")
}
# Test 2: Check if 'Redemption Count' and 'Sales Count' are non-negative
if (all(simulated_data$`Redemption Count` >= 0) &&
all(simulated_data$`Sales Count` >= 0)) {
cat("Test 2 Passed: 'Redemption Count' and 'Sales Count' are within the expected range\n")
} else {
cat("Test 2 Failed: 'Redemption Count' or 'Sales Count' is out of range\n")
}
# Test 3: Check if 'Timestamp' column is in correct POSIXct time format
# Attempt to convert the 'Timestamp' column to POSIXct and check for any conversion failures
timestamps <- as.POSIXct(simulated_data$Timestamp, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
if (all(!is.na(timestamps))) {
cat("Test 3 Passed: All 'Timestamp' values are valid POSIXct time variables\n")
} else {
cat("Test 3 Failed: Some 'Timestamp' values are not valid POSIXct time variables\n")
}
#### Test data ####
simulated_data = read_csv("data/raw_data/raw-ferry-ticket-counts.csv")
library(tidyverse)
#### Simulate data ####
# Set seed
set.seed(100)
# Function to create random timestamps
generate_timestamps <- function(n, start_time = "2024-09-24 00:00:00", interval_minutes = 15) {
start_time <- as.POSIXct(start_time)
return(start_time + seq(0, by = interval_minutes * 60, length.out = n))
}
# Number of rows to simulate
n <- 1000
# Simulate data
simulated_data <- tibble(
`_id` = 1:n,
`Timestamp` = generate_timestamps(n, start_time = "2024-09-24 00:00:00", interval_minutes = 15),
`Redemption Count` = sample(0:20, n, replace = TRUE),  # random integer values from 0 to 20
`Sales Count` = sample(0:50, n, replace = TRUE)       # random integer values from 0 to 50
)
# show simulated data
head(simulated_data)
write_csv(simulated_data, "data/sim_data/sim-ferry-ticket-counts.csv")
library(tidyverse)
#### Test data ####
simulated_data = read_csv("data/sim_data/sim-ferry-ticket-counts.csv")
# Test 1: Check if number of rows is 1000
if (nrow(simulated_data) == 1000) {
cat("Test 1 Passed: Correct number of rows\n")
} else {
cat("Test 1 Failed: Incorrect number of rows\n")
}
# Test 2: Check if 'Redemption Count' and 'Sales Count' are non-negative
if (all(simulated_data$`Redemption Count` >= 0) &&
all(simulated_data$`Sales Count` >= 0)) {
cat("Test 2 Passed: 'Redemption Count' and 'Sales Count' are within the expected range\n")
} else {
cat("Test 2 Failed: 'Redemption Count' or 'Sales Count' is out of range\n")
}
# Test 3: Check if 'Timestamp' column is in correct POSIXct time format
# Attempt to convert the 'Timestamp' column to POSIXct and check for any conversion failures
timestamps <- as.POSIXct(simulated_data$Timestamp, format = "%Y-%m-%dT%H:%M:%S", tz = "UTC")
if (all(!is.na(timestamps))) {
cat("Test 3 Passed: All 'Timestamp' values are valid POSIXct time variables\n")
} else {
cat("Test 3 Failed: Some 'Timestamp' values are not valid POSIXct time variables\n")
}
install_tinytex()
quarto install tinytex
tinytex::install_tinytex()
library(opendatatoronto)
library(tidyverse)
#### Download data ####
# get package
package <- show_package("toronto-island-ferry-ticket-counts")
package
# get all resources for this package
resources <- list_package_resources("toronto-island-ferry-ticket-counts")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
data
#### Save data ####
# change the_raw_data to whatever name you assigned when you downloaded it.
write_csv(data, "data/raw_data/raw-ferry-ticket-counts.csv")
View(data)
